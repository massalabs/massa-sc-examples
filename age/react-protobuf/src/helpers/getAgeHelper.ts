
/*****************IMPORTS GENERATED BY MASSA-PROTO-CLI*****************/

import {
  OperationOutputs,
} from "./FiEXMTvDMCaller";
import { getEvents } from "./commonHelper";
import { IBaseAccount } from "@massalabs/massa-web3/dist/esm/interfaces/IBaseAccount";
import {
  IEvent,
  ICallData,
} from "@massalabs/massa-web3";


/*****************GENERATED BY PROTOC*****************/

// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "getAge.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message getAgeHelper
 */
export interface getAgeHelper {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message getAgeRHelper
 */
export interface getAgeRHelper {
    /**
     * @generated from protobuf field: uint32 value = 1;
     */
    value: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class getAgeHelper$Type extends MessageType<getAgeHelper> {
    constructor() {
        super("getAgeHelper", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<getAgeHelper>): getAgeHelper {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<getAgeHelper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: getAgeHelper): getAgeHelper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: getAgeHelper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message getAgeHelper
 */
export const getAgeHelper = new getAgeHelper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class getAgeRHelper$Type extends MessageType<getAgeRHelper> {
    constructor() {
        super("getAgeRHelper", [
            { no: 1, name: "value", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<getAgeRHelper>): getAgeRHelper {
        const message = { value: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<getAgeRHelper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: getAgeRHelper): getAgeRHelper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 value */ 1:
                    message.value = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: getAgeRHelper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 value = 1; */
        if (message.value !== 0)
            writer.tag(1, WireType.Varint).uint32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message getAgeRHelper
 */
export const getAgeRHelper = new getAgeRHelper$Type();



/*****************GENERATED BY MASSA-PROTO-CLI*****************/

const OUTPUTS_PREFIX = 'ResultgetAge:';

export async function getAgeExtractOutputsAndEvents(
  contractAddress: string,
  functionName: string,
  args: Uint8Array,
  coins: bigint,
  returnType: string,
  account: IBaseAccount,
  nodeUrl: string,
  fee = 0n,
  maxGas = BigInt(4_294_967_295), // = max block gas limit
): Promise<OperationOutputs> {

  let events: IEvent[] = [];

  // try to call the Smart Contract
  try{
    events = await getEvents(
      { operationId:
        await account.callSmartContract(
          {
            fee: fee,
            maxGas: maxGas,
            coins: coins,
            targetAddress: contractAddress,
            functionName: functionName,
            parameter: Array.from(args),
          } as ICallData,
        ),
      },
      nodeUrl,
    )
  }
  catch (err) {
    console.log("Error while calling the Smart Contract: " + err);
    return {
      events: events,
      error: err,
    } as OperationOutputs;
  }

  // if the call is successful, retrieve the outputs from the events
  let rawOutput: string | null = null;
  for (let event of events) {
    if (event.data.slice(0, OUTPUTS_PREFIX.length) == OUTPUTS_PREFIX) {
      rawOutput = event.data.slice(OUTPUTS_PREFIX.length);
      // remove the event from the list
      events.splice(events.indexOf(event), 1);
      break;
    }
  }

  // check the output and return the result
  if (rawOutput === null && returnType !== 'void') {
    const detectedEventsData = events.map((e) => e.data);
    throw new Error(
      'Output expected but not found. Events detected:\n' + '[ ' + detectedEventsData.join(' ]\n[ ') + ' ]',
    );
  }
  if(rawOutput === null && returnType === 'void') {
    return{
      events: events,
    };
  }
  if(rawOutput !== null && returnType !== 'void') {
    let output: Uint8Array = new Uint8Array(Buffer.from(rawOutput, 'base64'));
    // try to deserialize the outputs
    let deserializedOutput: number;
    try{
      deserializedOutput = getAgeRHelper.fromBinary(output).value;
  }
    catch (err) {
      throw new Error(
        'Deserialization Error: ' + err + 'Raw Output: ' + rawOutput,
      );
    }
    
    return {
      outputs: deserializedOutput,
      events: events,
    } as OperationOutputs;
  }
  throw new Error('getAgeCaller: Unexpected error');
}


