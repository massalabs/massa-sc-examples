
import { lastResultExtractOutputsAndEvents } from "./lastResultHelper";
import { sumExtractOutputsAndEvents, sumHelper } from "./sumHelper";
import {
  IEvent,
  WalletClient,
} from "@massalabs/massa-web3";
import { IBaseAccount } from "@massalabs/massa-web3/dist/esm/interfaces/IBaseAccount";


/**
 * This interface is used to represents the outputs of the SC call.
 *
 * @see outputs - The outputs of the SC call (optional)
 * @see events - The events emitted by the SC call (optional)
 */
export interface OperationOutputs {
  outputs?: any;
  events: IEvent[];
  error?: any;
}


export class Tib4pYZs9ABlockchainCaller {
  private nodeRPC: string;

  public account: IBaseAccount;
  public coins: bigint;
  public fee: bigint = 0n;
  public maxGas: bigint = BigInt(4_294_967_295); // = max block gas limit


  constructor(account: IBaseAccount, coins: bigint, nodeRPC: string, fee?: bigint, maxGas?: bigint) {
    this.nodeRPC = nodeRPC;
    this.account = account;
    this.coins = coins;
    if(fee) this.fee = fee;
    if(maxGas) this.maxGas = maxGas;
  }

  /**
   * This method have been generated by the Massa Proto CLI.
   * It allows you to instantiate a new Tib4pYZs9ABlockchainCaller object with the default values.
   *
   * @param {WalletClient} walletClient - The wallet client object to create the account from
   * 
   * @returns {Promise<Tib4pYZs9ABlockchainCaller>} A promise that resolves to a new Tib4pYZs9ABlockchainCaller object
   */
  static async newDefault(walletClient: WalletClient): Promise<Tib4pYZs9ABlockchainCaller> {
    const nodeRPC = await walletClient.clientConfig.providers[0].url; 
    const account = await walletClient.getBaseAccount();
    if(!account) throw new Error("No account found in the wallet");
    const coins = 0n;
    return new Tib4pYZs9ABlockchainCaller(account, coins, nodeRPC);
  }


  /**
   * This method have been generated by the Massa Proto CLI.
   * It allows you to call the "lastResult" function of the
   * "AS12J5GFW1QTjGQyZ4HRYUZxFT6PjNDUE94rdW5PGnntib4pYZs9A" Smart Contract.
   *
   * @remarks
   * To work properly, you need to run 'npm install @protobuf-ts/plugin' in your project folder.
   * Otherwise, this caller will not work.
   *
   
   *
   * @param {bigint} coins - The amount of Massa coins to send to the block creator
   *
   * @returns {Promise<OperationOutputs>} A promise that resolves to an object which contains the outputs and events from the call to lastResult.
   */
  async lastResult(
    fee?: bigint, 
    maxGas?:bigint
  ): Promise<OperationOutputs> {
    
    // Send the operation to the blockchain and retrieve its outputs
    if(!fee) fee = this.fee;
    if(!maxGas) maxGas = this.maxGas;
    return (
      await lastResultExtractOutputsAndEvents(
        'AS12J5GFW1QTjGQyZ4HRYUZxFT6PjNDUE94rdW5PGnntib4pYZs9A',
        'lastResult',
        new Uint8Array(),
        this.coins,
        'bigint',
        this.account,
        this.nodeRPC,
        fee,
        maxGas,
      )
    );
  }



  /**
   * This method have been generated by the Massa Proto CLI.
   * It allows you to call the "sum" function of the
   * "AS12J5GFW1QTjGQyZ4HRYUZxFT6PjNDUE94rdW5PGnntib4pYZs9A" Smart Contract.
   *
   * @remarks
   * To work properly, you need to run 'npm install @protobuf-ts/plugin' in your project folder.
   * Otherwise, this caller will not work.
   *
   * @param {bigint} a - 
   * @param {bigint} b - 
   *
   * @param {bigint} coins - The amount of Massa coins to send to the block creator
   *
   * @returns {Promise<OperationOutputs>} A promise that resolves to an object which contains the outputs and events from the call to sum.
   */
  async sum(
    a: bigint,
    b: bigint,
    fee?: bigint, 
    maxGas?:bigint
  ): Promise<OperationOutputs> {
    // Verify that the given arguments are valid
		if (a < 0) throw new Error("Invalid argument: a cannot be negative according to protobuf file.");
		if (b < 0) throw new Error("Invalid argument: b cannot be negative according to protobuf file.");


// Serialize the arguments
    const serializedArgs = sumHelper.toBinary({
      a: a,
      b: b,
    });

    // Send the operation to the blockchain and retrieve its outputs
    if(!fee) fee = this.fee;
    if(!maxGas) maxGas = this.maxGas;
    return (
      await sumExtractOutputsAndEvents(
        'AS12J5GFW1QTjGQyZ4HRYUZxFT6PjNDUE94rdW5PGnntib4pYZs9A',
        'sum',
        serializedArgs,
        this.coins,
        'bigint',
        this.account,
        this.nodeRPC,
        fee,
        maxGas,
      )
    );
  }

  /**
  * This method have been generated by the Massa Proto CLI.
  * It allows you to update the amount of Massa coins to send to the block creator when calling the Smart Contract.
  */
 editCoins(coins: bigint) {
   this.coins = coins;
 }
}
