import { eventHelper } from "./eventHelper";

export interface TransactionDetails {
  operationId: string;
}

/** The following global variable and the next class should be in a dedicated file. */
let callSC: (address: string, funcName: string, binArguments: Uint8Array, maxCoin: bigint) => Promise<TransactionDetails>;

/**
 * A class to call the blockchain.
 */
export class BlockchainCaller {
  /**
   * Constructor for the BlockchainCaller class.
   *
   * @param {Function} caller - The function to call the blockchain.
   */
  constructor(
    caller: (
      address: string,
      funcName: string,
      binArguments: Uint8Array,
      maxCoin: bigint
    ) => Promise<TransactionDetails>
  ) {
    if (!caller) {
      throw new Error('A caller function must be provided');
    }
    callSC = caller;
  }
}

/**
 * This method have been generated by the Massa Proto CLI.
 * It allows you to call the "event" function of the 
 * "AS12r62avFS7NwXhSCLNjszUBUL7a5RMCmM9XicgdAd5bPRsP4fTF" Smart Contract.
 * 
 * @remarks
 * To work properly, you need to run 'npm install @protobuf-ts/plugin' in your project folder.
 * Otherwise, this caller will not work.
 * 
 * @param {bigint} num - 
 * @param {string} value - 
 * @param {number} bleu - 
 *
 * @returns {uint64} The result of the "event" function.
 */
 export async function event(num: bigint, value: string, bleu: number, coins: bigint): Promise<bigint> {
  // Verify that the given arguments are valid
	if (num < 0) throw new Error("Invalid argument: num cannot be negative according to protobuf file.");
	if (bleu < 0) throw new Error("Invalid argument: bleu cannot be negative according to protobuf file.");

  // Serialize the arguments
  const serializedArgs = eventHelper.toBinary({
    num: num,
    value: value,
    bleu: bleu
  });

  // Send the operation to the blockchain and retrieve its outputs
  return await callSC(
    'AS12r62avFS7NwXhSCLNjszUBUL7a5RMCmM9XicgdAd5bPRsP4fTF',
    'event',
    serializedArgs,
    coins,
  );
}
